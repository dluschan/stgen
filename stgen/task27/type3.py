from itertools import product, combinations
from .common import Task27

class Type3(Task27):
	def __init__(self):
		super().__init__()
		self.test_size = 100
		self.params = {
			'n': [int, [2, 10], 'количество чисел'],
			'a': [int, None, 'первое искомое число'],
			'b': [int, None, 'второе искомое число'],
			'x': [int, [1, 10 ** 3], 'число в последовательности'],
		}
		self.legend = f"""Имеется последовательность целых положительных чисел.
		Необходимо найти максимальную сумму двух чисел этой последовательности, которые имеют разные остатки от деления на 18 и хотя бы одно из которых делится на 7. Если искомой пары чисел нет, то ответом счистается "0 0". Числа необходимо выводить в порядке возрастания."""
		self.solver = f"""from itertools import combinations
c, d = 7, 18
print(*sorted(max([p for p in combinations([int(input()) for _ in range(int(input()))], 2) if 0 not in p and (p[0] * p[1]) % c == 0 and (p[0] - p[1]) % d != 0], key=sum, default=(0, 0))))
"""
		self.input_format = """n
x|n"""
		self.output_format = """a b"""
		self.input_samples = ["""2
252
252
""",
"""2
882
714
""",
"""3
224
882
882
""",
"""2
231
805
""",
"""3
714
581
504
""",
"""4
504
882
231
581
""",
"""2
828
756
""",
"""3
882
882
198
""",
"""2
828
973
""",
"""3
224
252
936
""",
"""4
756
826
882
360
""",
"""3
72
581
448
""",
"""4
756
973
805
72
""",
"""5
224
756
756
360
231
""",
"""2
360
198
""",
"""3
756
846
270
""",
"""4
360
198
882
504
""",
"""3
72
448
360
""",
"""4
504
846
288
826
""",
"""5
936
231
882
882
936
""",
"""4
828
270
294
826
""",
"""5
882
360
198
714
973
""",
"""6
882
756
581
846
448
270
""",
"""2
882
307
""",
"""3
882
882
296
""",
"""2
802
714
""",
"""3
756
224
296
""",
"""4
504
851
504
973
""",
"""3
973
528
581
""",
"""4
802
224
252
805
""",
"""5
826
448
307
882
504
""",
"""2
452
846
""",
"""3
802
72
882
""",
"""4
882
296
198
756
""",
"""3
72
452
826
""",
"""4
711
828
504
826
""",
"""5
452
714
504
504
360
""",
"""4
224
714
288
528
""",
"""5
452
936
224
882
224
""",
"""6
252
711
224
756
448
198
""",
"""3
332
72
288
""",
"""4
296
270
288
882
""",
"""5
72
882
661
756
846
""",
"""4
307
581
72
72
""",
"""5
828
504
711
360
448
""",
"""6
72
973
756
332
72
756
""",
"""5
846
294
936
805
661
""",
"""6
973
711
756
468
231
288
""",
"""7
802
882
270
973
882
973
828
""",
"""2
661
296
""",
"""3
252
307
802
""",
"""4
756
504
851
307
""",
"""3
231
711
307
""",
"""4
504
307
224
661
""",
"""5
452
231
307
882
882
""",
"""4
224
802
448
307
""",
"""5
296
826
711
224
252
""",
"""6
224
448
504
332
756
661
""",
"""3
851
452
936
""",
"""4
882
851
528
198
""",
"""5
360
252
882
851
332
""",
"""4
274
452
714
270
""",
"""5
826
452
452
198
756
""",
"""6
504
452
802
882
936
826
""",
"""5
661
528
973
973
270
""",
"""6
294
528
307
936
756
714
""",
"""7
360
882
528
332
294
252
448
""",
"""4
307
468
828
452
""",
"""5
936
307
72
274
252
""",
"""6
270
296
756
802
252
360
""",
"""5
448
468
452
198
851
""",
"""6
360
826
332
252
711
270
""",
"""7
882
851
756
448
270
270
332
""",
"""6
72
661
661
224
294
198
""",
"""7
714
846
274
294
851
756
288
""",
"""8
274
360
882
936
882
802
224
448
""",
]

	def category(self):
		return super().category() + 'Тип 3'
